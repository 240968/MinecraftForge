--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -62,7 +_,10 @@
    }
 
    public void m_9933_() {
-      if (this.f_10019_ == ServerLoginPacketListenerImpl.State.VERIFYING) {
+      if (this.f_10019_ == State.NEGOTIATING) { //TODO: Redesign with new protocol switching Mojang added
+         if (net.minecraftforge.network.NetworkHooks.tickNegotiation(this.f_10013_))
+            this.f_10019_ = State.VERIFYING;
+      } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.VERIFYING) {
          this.m_294778_(Objects.requireNonNull(this.f_291112_));
       }
 
@@ -101,7 +_,7 @@
 
    public String m_10056_() {
       String s = this.f_10013_.m_295656_(this.f_10018_.m_292975_());
-      return this.f_291165_ != null ? this.f_291165_ + " (" + s + ")" : s;
+      return this.f_291112_ != null ? this.f_291112_ + " (" + s + ")" : s;
    }
 
    public void m_5990_(ServerboundHelloPacket p_10047_) {
@@ -110,13 +_,13 @@
       this.f_291165_ = p_10047_.f_238040_();
       GameProfile gameprofile = this.f_10018_.m_236731_();
       if (gameprofile != null && this.f_291165_.equalsIgnoreCase(gameprofile.getName())) {
-         this.m_294008_(gameprofile);
+         this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
       } else {
          if (this.f_10018_.m_129797_() && !this.f_10013_.m_129531_()) {
             this.f_10019_ = ServerLoginPacketListenerImpl.State.KEY;
             this.f_10013_.m_129512_(new ClientboundHelloPacket("", this.f_10018_.m_129790_().getPublic().getEncoded(), this.f_252396_));
          } else {
-            this.m_294008_(m_295545_(this.f_291165_));
+            this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
          }
 
       }
@@ -180,7 +_,7 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + f_10014_.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + f_10014_.incrementAndGet()) {
          public void run() {
             String s1 = Objects.requireNonNull(ServerLoginPacketListenerImpl.this.f_291165_, "Player name not initialized");
 
@@ -200,7 +_,7 @@
             } catch (AuthenticationUnavailableException authenticationunavailableexception) {
                if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Authentication servers are down but will let them in anyway!");
-                  ServerLoginPacketListenerImpl.this.m_294008_(ServerLoginPacketListenerImpl.m_295545_(s1));
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Couldn't verify username because servers are unavailable");
@@ -220,6 +_,7 @@
    }
 
    public void m_10044_(ServerboundCustomQueryAnswerPacket p_297965_) {
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_297965_, this.f_10013_))
       this.m_10053_(f_291075_);
    }
 
@@ -230,6 +_,11 @@
       this.f_10013_.m_129505_(serverconfigurationpacketlistenerimpl);
       serverconfigurationpacketlistenerimpl.m_294295_();
       this.f_10019_ = ServerLoginPacketListenerImpl.State.ACCEPTED;
+   }
+
+   @Nullable
+   public GameProfile getAuthenticatedProfile() {
+       return this.f_291112_;
    }
 
    protected static GameProfile m_295545_(String p_297551_) {
